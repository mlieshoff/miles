/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package $package;

import javax.annotation.Generated;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

@Generated("org.mili.generator")
public class $testClassname {

    private $classname unitUnderTest;

    @Before
    public void setUp() {
        unitUnderTest = new $classname();
    }

#foreach( $field in $fieldlist )
    #set($fieldname = ${Utils.getJavaName($field.name)})
    @Test
    public void shouldGetSet${StringUtils.capitalize($fieldname)}() {
        ${Utils.getJavaType($field.type)} expected = ${Utils.getExampleValue($field.type)};
        unitUnderTest.set${StringUtils.capitalize($fieldname)}(expected);
        assertEquals(expected, unitUnderTest.get${StringUtils.capitalize($fieldname)}()${Utils.getExampleFloatingDeltaIfNeed($field.type)});
    }

#end
#foreach( $const in $constlist )
    @Test
    public void shouldGet$const.name#[[()]]# {
        assertEquals(#if($const.prefix) $const.value +#end #if($const.type == "String")"$const.value"#else$const.value#end, unitUnderTest.$const.name);
    }
    
#end
#if(!$extends.startsWith("map(") && !$extends.startsWith("list("))
    @Test
    public void shouldToString() {
        #foreach($field in $fieldlist)
        #set($fieldname = ${Utils.getJavaName($field.name)})
        unitUnderTest.set${StringUtils.capitalize($fieldname)}(${Utils.getExampleValueGeneric($field.type)});
        #end
        String expected = "$classname{#foreach($field in $fieldlist)#set($fieldname = ${Utils.getJavaName($field.name)})$fieldname=${Utils.getExampleToStringValue($field.type)}#if($foreach.count < $fieldlist.size()), #end#end}";
        String actual = unitUnderTest.toString();
        assertEquals(expected, actual);
    }
#end

}