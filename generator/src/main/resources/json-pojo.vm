/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package $package;

import javax.annotation.Generated;
import com.google.gson.annotations.SerializedName;

#if($field.deprecated)
@Deprecated
#end
@Generated("org.mili.generator")
public class $classname #if($extends)extends ${Utils.getJavaImplType($extends)} #end{
#foreach( $const in $constlist )

    #if($field.deprecated)
    @Deprecated
    #end
    public static final $const.type $const.name =#if($const.prefix) $const.value +#end #if($const.type == "String")"$const.value"#else$const.value#end;
#end

#foreach( $field in $fieldlist )
    #if($field.deprecated)
    @Deprecated
    #end
    @SerializedName("$field.name")
    private ${Utils.getJavaType($field.type)} ${Utils.getJavaName($field.name)};

#end
#foreach( $field in $fieldlist )
    #if($field.deprecated)
    @Deprecated
    #end
    #set($fieldname = ${Utils.getJavaName($field.name)})
    public void set${StringUtils.capitalize($fieldname)}(${Utils.getJavaType($field.type)} ${StringUtils.uncapitalize($fieldname)}) {
        this.${StringUtils.uncapitalize($fieldname)} = ${StringUtils.uncapitalize($fieldname)};
    }
    
    #if($field.deprecated)
    @Deprecated
    #end
    public ${Utils.getJavaType($field.type)} get${StringUtils.capitalize($fieldname)}() {
        return ${StringUtils.uncapitalize($fieldname)};
    }
    
#end
    #if(!$extends.startsWith("map(") && !$extends.startsWith("list("))
    public String toString() {
        java.lang.StringBuilder s = new java.lang.StringBuilder();
        s.append("$classname{");
        #foreach($field in $fieldlist)
        #set($fieldname = ${Utils.getJavaName($field.name)})
        s.append("$fieldname=");
        s.append($fieldname);
        #if($foreach.count < $fieldlist.size())
        s.append(", ");
        #end
        #end
        s.append("}");
        return s.toString();
    }
    #end

}